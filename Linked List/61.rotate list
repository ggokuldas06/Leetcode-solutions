/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        int length=0;
        ListNode* ltemp=head;
        while(ltemp!=nullptr)
        {
            length++;
            ltemp=ltemp->next;
        }
        if(length==0)
        {
            return head;
        }
        k=k%length;
        if(k==0||length<=1) return head;
        ListNode* curr=head;
        int index=0;
        while(curr!=nullptr && index<length-k-1)
        {
            curr=curr->next;
            index++;
        }
        if(curr==nullptr)
        {
            return head;
        }
        ListNode* nextNode=curr->next;
        ListNode* tempc=nextNode;
        while(tempc!=nullptr && tempc->next !=nullptr)
        {
            tempc=tempc->next;
        }
        tempc->next=head;
        curr->next = nullptr;
        head=nextNode;
        return head;
    }
};

*******************************
Time complexity O(N)
medium
https://leetcode.com/problems/rotate-list/?envType=study-plan-v2&envId=top-interview-150
*******************************
