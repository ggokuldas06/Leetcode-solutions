/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* deleteMiddle(ListNode* head) {
        ListNode* fast=head;
        ListNode* slow=head;
        while(fast!=nullptr && fast->next!=nullptr)
        {
            fast=fast->next->next;
            slow=slow->next;
        }
        if(fast==slow) return nullptr;
        ListNode* curr=head;
        while(curr!=nullptr)
        {
            if(curr->next==slow)
            {
                curr->next=curr->next->next;
            }
            else
            {
                curr=curr->next;
            }
        }
        return head;
    }
};

******************************
  Time complexity O(N)
  medium
  https://leetcode.com/problems/delete-the-middle-node-of-a-linked-list/
******************************
