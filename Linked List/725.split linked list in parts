class Solution {
public:
    int list_length(ListNode* head){
        int count = 0;
        while (head) {
            count++;
            head = head->next;
        }
        return count;
    }

    vector<ListNode*> splitListToParts(ListNode* head, int k) {
        int length = list_length(head);
        int carry = length % k;
        int min = length / k;
        vector<ListNode*> ans(k, nullptr);

        for (int i = 0; i < k && head; i++) {
            ListNode* answer_node = head;
            ListNode* dummy = head;

            for (int j = 0; j < min + (carry > 0 ? 1 : 0) - 1; j++) {
                if (dummy) dummy = dummy->next;
            }

            if (dummy) { 
                head = dummy->next;  
                dummy->next = nullptr; 
            }

            ans[i] = answer_node;
            if (carry > 0) carry--;
        }

        return ans;
    }
};



*********************************************
Time complexity O(n)
medium
https://leetcode.com/problems/split-linked-list-in-parts/
*********************************************
