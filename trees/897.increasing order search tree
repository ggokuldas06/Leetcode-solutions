/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*>values;
    void dfs(TreeNode* root)
    {
        if(!root) return ;
        dfs(root->left);
        values.push_back(root);
        dfs(root->right);
    }
    TreeNode* increasingBST(TreeNode* root) {
        if (root==nullptr) return root;
        dfs(root);
        for(int i=0;i<values.size()-1;i++)
        {
            values[i]->right=values[i+1];
            values[i]->left=nullptr;
        }
        values[values.size()-1]->right=nullptr;
        values[values.size()-1]->left   =nullptr;
        return values[0];    
    }
};
****************************
TIme complexity O(n)
easy
https://leetcode.com/problems/increasing-order-search-tree/
****************************
