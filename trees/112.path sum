/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int target;
    bool dfs(TreeNode* node, int curr)
    {
        if(node==nullptr) return false;
        else
        {
            if(node->left==nullptr && node->right==nullptr) return (curr+node->val)==target;
            curr+=node->val;
            return dfs(node->left,curr)||dfs(node->right,curr);
        }
    }
    bool hasPathSum(TreeNode* root, int targetSum) {
        target=targetSum;
        if(root==nullptr) return false;
        return dfs(root,0);
    }
};

***********************
Time complexity o(n)
easy
https://leetcode.com/problems/path-sum/
***********************
