/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int ans=0;
     dfs(TreeNode* root)
    {
        if(root->left==nullptr && root->right==nullptr) return 0;
        ans=max(dfs(root->left),dfs(root->right))+1;
    }
    int diameterOfBinaryTree(TreeNode* root) {
        int x=dfs(root);
        return ans;
    }
};

************************
Time complexity O(n)
easy
https://leetcode.com/problems/diameter-of-binary-tree/
************************
