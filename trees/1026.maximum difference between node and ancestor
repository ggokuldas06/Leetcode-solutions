/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int result=0;
    void dfs(TreeNode* node, int curr_min, int curr_max)
    {
        if(node==nullptr) return ;
        result = max(result, abs(node->val - curr_min));
        result = max(result, abs(node->val - curr_max));

        curr_min=min(curr_min,node->val);
        curr_max=max(curr_max,node->val);
        dfs(node->left,curr_min,curr_max);
        dfs(node->right,curr_min,curr_max);
    }
    int maxAncestorDiff(TreeNode* root) {
       dfs(root,root->val,root->val);
       return result; 
    }
};

************************
Time complexity O(n)
medium
https://leetcode.com/problems/maximum-difference-between-node-and-ancestor/
************************
