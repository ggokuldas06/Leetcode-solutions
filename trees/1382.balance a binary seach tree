/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int>nums;
    void traverse(TreeNode* head)
    {
        if(!head) return;
        traverse(head->left);
        nums.push_back(head->val);
        traverse(head->right);
    }
    TreeNode* constr(int start,int end)
    {
        if(start>end) return nullptr;
        int middle=start+((end-start)/2);
        TreeNode* head=new TreeNode(nums[middle]);
        head->left=constr(start,middle-1);
        head->right=constr(middle+1,end);
        return head;
    }
    TreeNode* balanceBST(TreeNode* root) {
        traverse(root);
        return constr(0,nums.size()-1);
    }
};

***************************************
Time limit exceeded O(nlogn)
mdium
***************************************
