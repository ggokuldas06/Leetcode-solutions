TREES
-> linked list points to the next node but trees point to the children
A->B
-> A  parent of B and B is child of A
-> binary tree consists maximum of two childnode
IMPLEMENTATION OF BINARY TREE:
// defining a binary tree
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int val) : val(val), left(nullptr), right(nullptr) {}
};
// access pointers
root.left // returns pointer to the left child of the root
root.right // returns pointer to the right child of the root
root.val // returns value of the root


// implementing a tree
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int val) : val(val), left(nullptr), right(nullptr) {}
};
// DFS
void dfs(TreeNode* node) {
    if (node == nullptr) {
        return;
    }
    
    dfs(node->left);
    dfs(node->right);
    return;
}
//BFS
void printAllNodes(TreeNode* root) {
    queue<TreeNode*> queue;
    queue.push(root);
    
    while (!queue.empty()) {
        int nodesInCurrentLevel = queue.size();
        // do some logic here for the current level

        for (int i = 0; i < nodesInCurrentLevel; i++) {
            TreeNode* node = queue.front();
            queue.pop();

            // do some logic here on the current node
            cout << node->val << endl;
            
            // put the next level onto the queue
            if (node->left) {
                queue.push(node->left);
            }
            
            if (node->right) {
                queue.push(node->right);
            }
        }
    }
}

->used to traverse depth wise
->implemented using a queue
->best time is O(n)
//binary search tree
->it is also a type of binary tree
->it's right element is greater than the current node and the left node is lesser than the current node
->best case O(logn)
->worst case O(n)
