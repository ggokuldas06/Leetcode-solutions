/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int counter=0;
    void dfs(TreeNode* node, int max_now)
    {
        if(node==nullptr) return;
        if(node->val>=max_now) {
            counter++;
            max_now=node->val;
        }
        dfs(node->left,max_now);
        dfs(node->right,max_now);


    }
    int goodNodes(TreeNode* root) {
        if(root==nullptr) return false;
        dfs(root,root->val);
        return counter;
    }

};

*****************************
Time complexity O(n)
medium
https://leetcode.com/problems/count-good-nodes-in-binary-tree/
*****************************
