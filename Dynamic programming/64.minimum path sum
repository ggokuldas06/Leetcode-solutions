class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        vector<vector<int>>dp(grid.size(),vector(grid[0].size(),INT_MAX));
        int n=grid.size(),m=grid[0].size();
        for(int i=0;i<grid.size();i++)
        {
            for(int j=0;j<grid[0].size();j++)
            {
                if(i==0||j==0)
                {
                    if(i==0 && j==0)
                    {
                        dp[i][j]=grid[i][j];
                    }
                    else if(i>0)
                    {
                        dp[i][j]=dp[i-1][j]+grid[i][j];
                    }
                    else if(j>0)
                    {
                        dp[i][j]=dp[i][j-1]+grid[i][j];
                    }
                }
                else
                {
                    dp[i][j]=grid[i][j]+min(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        return dp[n-1][m-1];
    }
};


******************************
Time complexity o(n*m)
medium
https://leetcode.com/problems/minimum-path-sum/
******************************
