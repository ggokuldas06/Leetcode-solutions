*************************************************************
TOP-BOTTOM APPROACH
*************************************************************
class Solution {
public:
    int maxProfit(vector<int>& prices, int fee) {
        vector<vector<int>>dp(prices.size()+1,vector<int>(2,0));
        int n=prices.size();
        for(int i=n-1;i>=0;i--)
        {
            for(int j=0;j<2;j++)
            {
                int ans=dp[i+1][j];
                if(j==0)
                {
                    int buy=dp[i+1][1]-prices[i];
                    ans=max(ans,buy);
                }
                else if(j==1)
                {
                    int sell=dp[i+1][0]+prices[i]-fee;
                    ans=max(ans,sell);
                }
                dp[i][j]=ans;
            }
        }
        return dp[0][0];
    }
};
*************************************************************
TOP - BOTTOM APPROACH
*************************************************************
class Solution {
public:
    vector<int>prices;
    vector<vector<int>>memo;
    int fee;
    int maxProfit(vector<int>& prices, int fee) {
        this->prices=prices;
        this->fee=fee;
        memo=vector<vector<int>>(prices.size(),vector<int>(2,-1));
        return dp(0,0);
    }
    int dp(int i,int holding)
    {
        if(i==prices.size()) return 0;
        if(memo[i][holding]!=-1) return memo[i][holding];
        int ans=dp(i+1,holding);
        if(holding==0)
        {
            int buy=dp(i+1,1)-prices[i];
            ans=max(ans,buy);
        }
        else if(holding==1)
        {
            int sell=dp(i+1,0)+prices[i]-fee;
            ans=max(ans,sell);
        }
        memo[i][holding]=ans;
        return ans;
    }
};
*************************************************************
