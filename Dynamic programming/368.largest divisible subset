class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        int n=nums.size();
        if(n==0) return {};
        vector<int>dp(n,1);
        vector<int>prev(n,-1);
        int index=0;
        sort(nums.begin(),nums.end());
        for(int i=1;i<n;i++){
            for(int j=0;j<i;j++){
                if(nums[i]%nums[j]==0 && dp[j]+1>dp[i]){
                    dp[i]=dp[j]+1;
                    prev[i]=j;
                }
            }
            if(dp[index]<dp[i]){
                index=i;
            }
        }
        vector<int>result;
        while(index!=-1){
            result.push_back(nums[index]);
            index=prev[index];
        }
        return result;
    }
};


******************************
time complexity o(n^2)
******************************
