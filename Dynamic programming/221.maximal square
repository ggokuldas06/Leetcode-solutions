class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        int m=matrix.size();
        int n=matrix[0].size();
        int ans=-1;
        vector<vector<int>>dp(m,vector<int>(n,0));
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(i==0 || j==0){
                    dp[i][j]=matrix[i][j]-'0';
                }
                else if(matrix[i][j]=='0'){
                    dp[i][j]=0;
                }
                else{
                    int top=dp[i-1][j];
                    int left=dp[i][j-1];
                    int top_left=dp[i-1][j-1];
                    dp[i][j]=min(top,min(left,top_left))+1;
                }
                if(dp[i][j]>ans) ans=dp[i][j];
            }
        }
        return ans*ans;
    }
};

**************************
Time complexity o(m*n)
**************************
