class Solution {
public:
    long long totalCost(vector<int>& costs, int k, int candidates) {
        long long ans = 0;
        int left = 0, right = costs.size() - 1;
        priority_queue<int, vector<int>, greater<int>> heapl, heapr;

        for (int i = 0; i < candidates && left <= right; i++) {
            heapl.push(costs[left++]);
        }
        for (int i = 0; i < candidates && left <= right; i++) {
            heapr.push(costs[right--]);
        }
        while (k--) {
            int l = heapl.empty() ? INT_MAX : heapl.top();
            int r = heapr.empty() ? INT_MAX : heapr.top();

            if (l <= r) {
                ans += l;
                heapl.pop();
                if (left <= right) {
                    heapl.push(costs[left++]);
                }
            } else {
                ans += r;
                heapr.pop();
                if (left <= right) {
                    heapr.push(costs[right--]);
                }
            }
        }

        return ans;
    }
};
