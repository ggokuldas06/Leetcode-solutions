class Solution {
public:
    vector<vector<int>> ans;

    vector<vector<int>> combinationSum3(int k, int n) {
        vector<int> curr;
        backtrack(n, curr, k, 1);
        return ans;
    }

    void backtrack(int target, vector<int>& curr, int k, int index) {
        if (target == 0 && curr.size() == k) {
            ans.push_back(curr);
            return;
        }
        if (curr.size() >= k) return; 

        for (int i = index; i <= 9; i++) {
            if (target - i >= 0) {
                curr.push_back(i);
                backtrack(target - i, curr, k, i + 1);
                curr.pop_back(); 
            }
        }
    }
};



*************************************
Time complexity O(2^k)
medium
https://leetcode.com/problems/combination-sum-iii/submissions/1561066764/
*************************************
