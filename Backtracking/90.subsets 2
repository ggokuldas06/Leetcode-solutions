class Solution {
public:
    vector<vector<int>>ans;
    void backtrack(vector<int>&nums,vector<int>&curr,int index)
    {
        if(index==nums.size())
        {
            ans.push_back(curr);
            return;
        }
        curr.push_back(nums[index]);
        backtrack(nums,curr,index+1);
        curr.pop_back();
        int j=index;
        while(j<nums.size() && nums[j]==nums[index])
        {
            j++;
        }
        backtrack(nums,curr,j);
    }
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        vector<int>curr;
        backtrack(nums,curr,0);
        return ans;
    }
};

********************************************
Time complexity o(n)
medium
https://leetcode.com/problems/subsets-ii/
********************************************
