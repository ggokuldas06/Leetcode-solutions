STACK:
-> ordered collection
-> added and removed from the same end
-> LIFO
INTERFACE:
        // Declaration: C++ supports multiple implementations, but we will be using
        // std::stack. Specify the data type
        stack<int> stack;
        
        // Pushing elements:
        stack.push(1);
        stack.push(2);
        stack.push(3);
        
        // Popping elements:
        // Note, unlike other languages, popping here does not return the popped value
        stack.pop();
        stack.pop();
        
        // Check if empty
        stack.empty(); // false
        
        // Check element at top
        stack.top(); // 1
        
        // Get size
        stack.size(); // 1

QUEUE:
-> FIFO-first in first out
-> elements are added and removed from opposite sides
-> cannot use dynaic array as complexity for adding and removing is o(n)
-> a doubly linked list can be used for O(1) operations
-> adding to a queue is "enqueue" and removing from a queue is "dequeue".
-> There is also a data structure called a deque, short for double-ended queue, and pronounced "deck". In a deque, you can add or delete elements from both ends. A normal queue designates adding to one end and deleting to another end.
-> mainly used to implement BFS in trees.

INTERFACE:
-> queue.push(x) // pushes element x to the back
-> queue.front() // returns an reference to the oldest(first) element in the queue
-> queue.back()// returns an reference to the newest(last) element in the queue.
-> queue.pop() // removes the oldest(first) element from the queue
-> queue.size() // size of the queue
-> queue.empty() // true if empty false otherwise.
